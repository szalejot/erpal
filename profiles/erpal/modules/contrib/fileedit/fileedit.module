<?php

require_once (dirname(__FILE__) . '/fileedit.inc');

/**
 * Implements hook_permission
 */
function fileedit_permission() {
    return array(
        FILEEDIT_PERMISSION_ACCESS_FILEEDIT => array(
            'title' => t('Allow to download, open, monitor and upload the changes of the files locally.'),
            'description' => t('Shows an edit button on each file to edit it locally'),
        ),
        FILEEDIT_PERMISSION_ADMIN_SETTINGS => array(
            'title' => t('Administer the fileedit module.'),
            'description' => t('Administer the fileedit module.'),
        ),
    );
}

/**
 * Implements hook_menu
 */
function fileedit_menu() {
    $items = array();

    $items[FILEEDIT_URL_PATTERN_DOWNLOAD] = array(
        'page callback' => 'fileedit_download',
        'page arguments' => array(2, 3),
        'access callback' => 'fileedit_download_access',
        'access arguments' => array(2, 3), //fid, session ID
        'type' => MENU_CALLBACK,
        'file' => 'fileedit.inc'
    );

    $items[FILEEDIT_URL_PATTERN_UPLOAD] = array(
        'page callback' => 'fileedit_upload',
        'page arguments' => array(2, 3),
        'access callback' => 'fileedit_download_access',
        'access arguments' => array(2, 3), //fid, session ID
        'type' => MENU_CALLBACK,
        'file' => 'fileedit.inc'
    );

    $items[FILEEDIT_URL_PATTERN_APPLET] = array(
        'page callback' => 'fileedit_monitor',
        'access callback' => 'user_access',
        'access arguments' => array(FILEEDIT_PERMISSION_ACCESS_FILEEDIT),
        'type' => MENU_CALLBACK,
        'file' => 'fileedit.inc'
    );

    $items[FILEEDIT_ADMIN_URL] = array(
        'title' => 'FilEdit Settings',
        'page callback' => 'drupal_get_form',
        'access callback' => 'user_access',
        'access arguments' => array(FILEEDIT_PERMISSION_ADMIN_SETTINGS),
        'page arguments' => array( 'fileedit_admin_settings_form' )
    );

    return $items;
}


/**
 * 
 */
function fileedit_admin_settings_form($form) {
    $form = array();

    $form['fileedit_ignore_ssl_errors'] = array(
        '#type' => 'select',
        '#title' => t('Ignore SSL Errors'),
        '#default_value' => variable_get('fileedit_ignore_ssl_errors', 'false'),
        '#options' => array(
            'false' => t('Do not Ignore SSL Error'), 
            'true' => t('Ignore SSL Error'),  
        ),
        '#description' => t("This flag indicates whether the java filehandler applet shall ignore SSL Exceptions."),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implements hook_theme
 */
function fileedit_theme() {
    return array(
        'fileedit_applet' => array(
            'variables' => array('args' => array()),
            'template' => 'fileedit_applet',
        )
    );
}

/**
 * Implements hook_theme_registry_alter
 */
function fileedit_theme_registry_alter(&$theme_registry) {
    $theme_registry['file_link']['preprocess functions'][] = 'fileedit_file_link_preprocess';
    $theme_registry['file_link']['function'] = 'theme_file_link_fileedit';
}

/**
 * Preprocess function for file_link theme
 */
function fileedit_file_link_preprocess(&$variables) {
    global $user;

    $file = $variables['file'];
    if (_fileedit_access_filedit($file->fid, $user)) {
        $variables[FILEEDIT_PERMISSION_ACCESS_FILEEDIT] = FILEEDIT_PERMISSION_ACCESS_FILEEDIT;
    }
}

/**
 * Theming a file link.
 */
function theme_file_link_fileedit(&$variables) {
    global $user;
    $out = !isset($variables['hide_download_link']) ? theme_file_link($variables) . ' ' : '';

    $file = $variables['file'];
    if (isset($variables[FILEEDIT_PERMISSION_ACCESS_FILEEDIT])) {
        static $js_inc = false;
        if (!$js_inc) {
            $js_inc = true;
            drupal_add_js(drupal_get_path('module', 'fileedit') . '/assets/js/fileedit.js');

            drupal_add_js(array('fileedit' => array(
                'sid' => $user->sid,
                'downloadUrl' => url(FILEEDIT_URL_PATTERN_DOWNLOAD, array('absolute' => true)),
                'uploadUrl' => url(FILEEDIT_URL_PATTERN_UPLOAD, array('absolute' => true)),
                'monitoringUrl' => url(FILEEDIT_URL_PATTERN_APPLET, array('absolute' => true)),
                'ignoreSSLErrors' => variable_get('fileedit_ignore_ssl_errors', 'false'),
                'uploadFieldName' => 'userfile'
            )), 'setting');
        }

        $out .= l(t('Edit'), '#', array(
                'attributes' => array(
                    'class' => array('fileedit-link'),
                    'fid' => $file->fid,
                    'filename' => $file->filename,
                )
            )
        );

//        $out .= '<iframe src="' . url(FILEEDIT_URL_PATTERN_APPLET, array('absolute' => true)) . '" width="400" height="300"></iframe>';
    }

    return $out;
}